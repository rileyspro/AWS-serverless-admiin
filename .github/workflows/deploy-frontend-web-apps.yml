# Derived from:
# nx - lint, test and build - https://nx.dev/recipes/ci/monorepo-ci-github-actions
# SHAs - https://github.com/nrwl/nx-set-shas
# publishing - https://lerna.js.org/docs/features/version-and-publish
name: 'admiin-frontend'
on:
  push:
    branches:
      - main
      - release/*
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - main
      - release/*

concurrency:
  group: admiin-frontend
  cancel-in-progress: true #cancels if newer push is detected

env:
  NODE_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}} # token generated by setup-node@v3 & used by project .npmrc files
  # BEFORE_SHA: ${{ github.event.before }} #TODO: check if required for affected, otherwise remove from here and below

jobs:
  notify-slack-push:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Notify Development of Push
        id: slack
        uses: slackapi/slack-github-action@v1.27.0
        with:
          # For posting a rich message using Block Kit
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "🚀 *Push Detected!*"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Awesome stuff by *${{ github.actor }}* is deploying on *${{ github.ref_name }}*\nMessage: *${{ github.event.head_commit.message }}*"
                  }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Commit",
                        "emoji": true
                      },
                      "url": "${{ github.event.head_commit.url }}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_GITHUB_DEVELOPMENT_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
  notify-slack-pr:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Notify Development of Pull Request
        id: slack
        uses: slackapi/slack-github-action@v1.27.0
        with:
          # For posting a rich message using Block Kit
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "🚀 *Pull Request Detected!*"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "PR by *${{ github.actor }}* on *${{ github.ref_name }}*"
                  }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View PR",
                        "emoji": true
                      },
                      "url": "${{ github.event.pull_request.html_url }}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_GITHUB_DEVELOPMENT_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
  build-deploy-cdk:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'yarn'
          registry-url: https://npm.pkg.github.com/
          scope: "@admiin-com"
          always-auth: true
      - name: Derive appropriate SHAs for base and head for `nx affected` commands
        id: setSHAs
        uses: nrwl/nx-set-shas@v4
      - run: |
          echo "BASE: ${{ steps.setSHAs.outputs.base }}"
          echo "HEAD: ${{ steps.setSHAs.outputs.head }}"
      - name: Set yarn version
        run: yarn set version 4.1.1
      - name: Install dependencies
        run: yarn --version && yarn set version 4.1.1 && yarn --version && yarn && cd apps/backend/src/layers/dependencyLayer/nodejs && yarn
        env:
          NODE_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
      - name: Checks for unformatted files
        run: yarn nx format:check --all
      - name: Check files formatted
        run: yarn nx affected -t lint --parallel=3 --exclude=backoffice-app --base=${{ steps.setSHAs.outputs.base }} --head=${{ steps.setSHAs.outputs.head }}
      - name: Create target directory if it does not exist
        run: mkdir -p apps/react-app/public/pspdfkit-lib
      - name: Copy .env file
        run: cp -R ./node_modules/pspdfkit/dist/pspdfkit-lib apps/react-app/public/ && cd apps/react-app/public/ && ls -la
      - name: Run automated tests
        run: yarn transpile:appsync:resolvers && yarn nx affected -t test --parallel=3 --configuration=ci --exclude backoffice-app,backend --base=${{ steps.setSHAs.outputs.base }} --head=${{ steps.setSHAs.outputs.head }}
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: "us-east-1"
      - name: Set environment variables based on branch
        run: |
          if [[ "${{ github.ref }}" == "refs/tags/*" ]]; then
            echo "ENV=prod" >> $GITHUB_ENV
            echo "ABR_GUID=${{ secrets.ABR_GUID_PROD }}" >> $GITHUB_ENV
            echo "API_KEY=${{ secrets.PROD_API_KEY }}" >> $GITHUB_ENV
            echo "AWS_ACCOUNT=${{ secrets.AWS_ACCOUNT_PROD }}" >> $GITHUB_ENV
            echo "FRANKIEONE_API_KEY=${{ secrets.FRANKIEONE_API_KEY_PROD }}" >> $GITHUB_ENV
            echo "FRANKIEONE_CUSTOMER_ID=${{ secrets.FRANKIEONE_CUSTOMER_ID_PROD }}" >> $GITHUB_ENV
            echo "MIXPANEL_SECRET=${{ secrets.MIXPANEL_SECRET_PROD }}" >> $GITHUB_ENV
            echo "MIXPANEL_TOKEN=${{ secrets.MIXPANEL_TOKEN_PROD }}" >> $GITHUB_ENV
            echo "XERO_CLIENT_ID=${{ secrets.XERO_CLIENT_ID_PROD }}" >> $GITHUB_ENV
            echo "ZAI_CLIENT_ID=${{ secrets.ZAI_CLIENT_ID_PROD }}" >> $GITHUB_ENV
            echo "ZAI_CLIENT_SCOPE=${{ secrets.ZAI_CLIENT_SCOPE_PROD }}" >> $GITHUB_ENV
            echo "ZAI_DOMAIN=${{ secrets.ZAI_DOMAIN_PROD }}" >> $GITHUB_ENV
            echo "APPLE_BUNDLE_ID=${{ vars.APPLE_BUNDLE_ID }}" >> $GITHUB_ENV
            echo "FRANKIEONE_API_DOMAIN=${{ vars.FRANKIEONE_API_DOMAIN_PROD }}" >> $GITHUB_ENV
            echo "FRANKIEONE_SMARTUI_DOMAIN=${{ vars.FRANKIEONE_SMARTUI_DOMAIN_PROD }}" >> $GITHUB_ENV
            echo "GOOGLE_BUNDLE_ID=${{ vars.GOOGLE_BUNDLE_ID }}" >> $GITHUB_ENV
            echo "GLEAP_API_TOKEN=${{ vars.GLEAP_API_TOKEN }}" >> $GITHUB_ENV
            echo "ZAI_TOKEN_DOMAIN=${{ vars.ZAI_TOKEN_DOMAIN_PROD }}" >> $GITHUB_ENV
            echo "ZAI_WEBHOOK_DOMAIN=${{ vars.ZAI_WEBHOOK_DOMAIN_PROD }}" >> $GITHUB_ENV
            echo "VITE_PSPDFKIT_KEY=${{ secrets.VITE_PSPDFKIT_KEY_PROD_APP }}" >> $GITHUB_ENV
          else
            echo "ENV=dev" >> $GITHUB_ENV
            echo "ABR_GUID=${{ secrets.ABR_GUID_DEV }}" >> $GITHUB_ENV
            echo "API_KEY=${{ secrets.DEV_API_KEY }}" >> $GITHUB_ENV
            echo "AWS_ACCOUNT=${{ secrets.AWS_ACCOUNT_DEV }}" >> $GITHUB_ENV
            echo "FRANKIEONE_API_KEY=${{ secrets.FRANKIEONE_API_KEY_DEV }}" >> $GITHUB_ENV
            echo "FRANKIEONE_CUSTOMER_ID=${{ secrets.FRANKIEONE_CUSTOMER_ID_DEV }}" >> $GITHUB_ENV
            echo "MIXPANEL_SECRET=${{ secrets.MIXPANEL_SECRET_DEV }}" >> $GITHUB_ENV
            echo "MIXPANEL_TOKEN=${{ secrets.MIXPANEL_TOKEN_DEV }}" >> $GITHUB_ENV
            echo "XERO_CLIENT_ID=${{ secrets.XERO_CLIENT_ID_DEV }}" >> $GITHUB_ENV
            echo "ZAI_CLIENT_ID=${{ secrets.ZAI_CLIENT_ID_DEV }}" >> $GITHUB_ENV
            echo "ZAI_CLIENT_SCOPE=${{ secrets.ZAI_CLIENT_SCOPE_DEV }}" >> $GITHUB_ENV
            echo "ZAI_DOMAIN=${{ secrets.ZAI_DOMAIN_DEV }}" >> $GITHUB_ENV
            echo "APPLE_BUNDLE_ID=${{ vars.APPLE_BUNDLE_ID }}" >> $GITHUB_ENV
            echo "FRANKIEONE_API_DOMAIN=${{ vars.FRANKIEONE_API_DOMAIN_DEV }}" >> $GITHUB_ENV
            echo "FRANKIEONE_SMARTUI_DOMAIN=${{ vars.FRANKIEONE_SMARTUI_DOMAIN_DEV }}" >> $GITHUB_ENV
            echo "GOOGLE_BUNDLE_ID=${{ vars.GOOGLE_BUNDLE_ID }}" >> $GITHUB_ENV
            echo "GLEAP_API_TOKEN=${{ vars.GLEAP_API_TOKEN }}" >> $GITHUB_ENV
            echo "ZAI_TOKEN_DOMAIN=${{ vars.ZAI_TOKEN_DOMAIN_DEV }}" >> $GITHUB_ENV
            echo "ZAI_WEBHOOK_DOMAIN=${{ vars.ZAI_WEBHOOK_DOMAIN_DEV }}" >> $GITHUB_ENV
            echo "VITE_PSPDFKIT_KEY=${{ secrets.VITE_PSPDFKIT_KEY_DEV_APP }}" >> $GITHUB_ENV
          fi
          echo "XERO_CLIENT_SECRET=${{ secrets.XERO_CLIENT_SECRET }}" >> $GITHUB_ENV
          echo "XERO_WEBHOOK_SECRET=${{ secrets.XERO_WEBHOOK_SECRET }}" >> $GITHUB_ENV
          echo "APPLE_CONNECT_KEY=${{ secrets.APPLE_CONNECT_KEY }}" >> $GITHUB_ENV
          echo "APPLE_CONNECT_KEY_ID=${{ secrets.APPLE_CONNECT_KEY_ID }}" >> $GITHUB_ENV
          echo "APPLE_CONNECT_ISSUER_ID=${{ secrets.APPLE_CONNECT_ISSUER_ID }}" >> $GITHUB_ENV
      - name: Write backend .env file
        run: |
          echo "ENV=${{ env.ENV }}" > apps/backend/.env
          echo "ABR_GUID=${{ env.ABR_GUID }}" >> apps/backend/.env
          echo "AWS_ACCOUNT=${{ env.AWS_ACCOUNT }}" >> apps/backend/.env
          echo "FRANKIEONE_API_KEY=${{ env.FRANKIEONE_API_KEY }}" >> apps/backend/.env
          echo "FRANKIEONE_CUSTOMER_ID=${{ env.FRANKIEONE_CUSTOMER_ID }}" >> apps/backend/.env
          echo "MIXPANEL_SECRET=${{ env.MIXPANEL_SECRET }}" >> apps/backend/.env
          echo "MIXPANEL_TOKEN=${{ env.MIXPANEL_TOKEN }}" >> apps/backend/.env
          echo "XERO_CLIENT_ID=${{ env.XERO_CLIENT_ID }}" >> apps/backend/.env
          echo "ZAI_CLIENT_ID=${{ env.ZAI_CLIENT_ID }}" >> apps/backend/.env
          echo "ZAI_CLIENT_SCOPE=${{ env.ZAI_CLIENT_SCOPE }}" >> apps/backend/.env
          echo "ZAI_DOMAIN=${{ env.ZAI_DOMAIN }}" >> apps/backend/.env
          echo "XERO_CLIENT_SECRET=${{ env.XERO_CLIENT_SECRET }}" >> apps/backend/.env
          echo "XERO_WEBHOOK_SECRET=${{ env.XERO_WEBHOOK_SECRET }}" >> apps/backend/.env
          echo "APPLE_BUNDLE_ID=${{ env.APPLE_BUNDLE_ID }}" >> apps/backend/.env
          echo "FRANKIEONE_API_DOMAIN=${{ env.FRANKIEONE_API_DOMAIN }}" >> apps/backend/.env
          echo "FRANKIEONE_SMARTUI_DOMAIN=${{ env.FRANKIEONE_SMARTUI_DOMAIN }}" >> apps/backend/.env
          echo "GOOGLE_BUNDLE_ID=${{ env.GOOGLE_BUNDLE_ID }}" >> apps/backend/.env
          echo "GLEAP_API_TOKEN=${{ env.GLEAP_API_TOKEN }}" >> apps/backend/.env
          echo "ZAI_TOKEN_DOMAIN=${{ env.ZAI_TOKEN_DOMAIN }}" >> apps/backend/.env
          echo "ZAI_WEBHOOK_DOMAIN=${{ env.ZAI_WEBHOOK_DOMAIN }}" >> apps/backend/.env

      - name: Write frontend .env file
        run: |
          echo "ENV=${{ env.ENV }}" > apps/react-app/.env
          echo "VITE_PSPDFKIT_KEY=${{ env.VITE_PSPDFKIT_KEY }}" >> apps/react-app/.env
      - name: Run codegen
        run: yarn codegen
      - name: Build packages
        run: yarn nx affected -t build --parallel=3 --exclude backoffice-app  --base=${{ steps.setSHAs.outputs.base }} --head=${{ steps.setSHAs.outputs.head }}
      - name: Deploy frontend to AWS using CDK
        #  github.event_name != 'pull_request' && steps.setSHAs.outputs.head != steps.setSHAs.outputs.base && contains(steps.setSHAs.outputs.affected_apps, 'react-app')
        run: yarn nx deploy backend ADM${{ env.ENV }}FrontendStack --require-approval=never
        env:
          AWS_DEFAULT_REGION: us-east-1 # or different region
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
  notify-slack-deployment:
    runs-on: ubuntu-latest
    needs: build-deploy-cdk
    if: always()
    steps:
      - name: Notify Development of Deployment
        id: slack
        uses: slackapi/slack-github-action@v1.27.0
        with:
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "${{ needs.build-deploy-cdk.result == 'success' && '🎉 *Build Succeeded!*' || '❌ *Build Failed!*' }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Magic created by *${{ github.actor }}* on *${{ github.ref_name }}*\nMessage: *${{ github.event.head_commit.message }}*"
                  }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Job",
                        "emoji": true
                      },
                      "url": "${{github.server_url}}/${{github.repository}}/actions/runs/${{github.event.workflow_run.id}}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_GITHUB_DEVELOPMENT_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
